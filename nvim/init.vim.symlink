" Plugins will be downloaded under the specified directory.
" You can find lots of plugins on https://vimawesome.com/
call plug#begin('~/.vim/plugged')

" Declare the list of plugins.
Plug 'tpope/vim-fugitive'
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'vim-airline/vim-airline'
Plug 'morhetz/gruvbox'
Plug 'easymotion/vim-easymotion'
Plug 'scrooloose/nerdcommenter'
Plug 'terryma/vim-multiple-cursors'
Plug 'ryanoasis/vim-devicons'
Plug 'terryma/vim-expand-region'
Plug 'christoomey/vim-tmux-navigator'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'airblade/vim-gitgutter'
Plug 'sjl/gundo.vim'

" Textobj
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-indent'
Plug 'nelstrom/vim-textobj-rubyblock'

" Fzf
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

if(has('nvim'))
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/neocomplete'
endif

" List ends here. Plugins become visible to Vim after this call.
call plug#end()
" -----------------------------
"  Display
" -----------------------------
set nocompatible
colorscheme gruvbox
set background=dark

" Display extra whitespace
set list listchars=eol:¬,tab:▸\ ,trail:.,
set nojoinspaces
" Softtabs, 2 spaces
" https://segmentfault.com/a/1190000000446738
syntax enable
set smarttab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set shiftround
set expandtab
set ignorecase
set smartcase
set wildignorecase
set autoindent
set smartindent
set mouse=a
set enc=utf8
set cursorline!
set cursorcolumn
set clipboard=unnamed
set wrapscan
set scrolloff=7
set confirm
set relativenumber
set lazyredraw
syntax sync minlines=256
" For GUI Font
" set guifont=Droid\ Sans\ Mono\ for\ Powerline\ Nerd\ Font\ Complete:h12


" -----------------------------
"  Autoload
" -----------------------------

" NERDTree
" let g:nerdtree_tabs_open_on_console_startup=2
" let g:nerdtree_tabs_smart_startup_focus=2
"" Disable <C-j> and <C-k>
let g:NERDTreeMapJumpPrevSibling='<Nop>'
let g:NERDTreeMapJumpNextSibling='<Nop>'

" vim-surround
let g:surround_116 = "<\r>"

" Use deoplete.
let g:deoplete#enable_at_startup = 1

" Ag
let g:ag_working_path_mode="r"

" Airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#show_tab_nr = 0
"
" vim-multiple-cursors
let g:multi_cursor_exit_from_visual_mode = 0
let g:multi_cursor_exit_from_insert_mode = 0

" deoplete and vim-multiple-cursors bugs
function Multiple_cursors_before()
  let g:deoplete#disable_auto_complete = 1
endfunction
function Multiple_cursors_after()
  let g:deoplete#disable_auto_complete = 0
endfunction

" text-obj
runtime macros/matchit.vim
set nocompatible
if has("autocmd")
  filetype indent plugin on
endif


" -----------------------------
"  Number
" -----------------------------

" Set relativenumber while in normal mode
set number
" Invert comment below if you do/don't want auto switch relativenumber
" set norelativenumber
autocmd InsertEnter * :set norelativenumber
autocmd InsertLeave * :set relativenumber 


" -----------------------------
" Key mappings 
" -----------------------------

let mapleader = "\<Space>"

" For physical line navigation
noremap  <buffer> <silent> k gk
noremap  <buffer> <silent> j gj
noremap  <buffer> <silent> 0 g0
noremap  <buffer> <silent> $ g$

" Select pasted region
noremap gV `[v`]

" switch macro recording to Z
nnoremap Z q
nnoremap q <nop>

" Redo maps to capital U
nnoremap U <C-R>

" 2x scrolling
nnoremap <C-e> 2<C-e>
nnoremap <C-y> 2<C-y>

" Keep search pattern at the center of the screen
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz

" Auto jump to the next line when copy/paste
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

" Unsets the "last search pattern" register by hitting return
nnoremap z :noh<CR>

" sudo write current file
cnoremap +w!! w !sudo tee > /dev/null %

" Line Navigation
noremap H ^
noremap L $
inoremap <C-a> <C-o>^
inoremap <C-e> <C-o>$

" Tab Navigation
" `-` means tab 
" TODO: same as NERDTree
nnoremap -= gt
nnoremap =- gT
nnoremap -n :tabe<CR>
nnoremap -x :tabc<CR>
nnoremap -o :tabonly<CR>
nnoremap -q :qa<CR>
let g:NERDTreeMapOpenInTab = '-n'
let g:NERDTreeMapOpenInTabSilent = '_N'

" Window Navigation
" Split buffer (See :help split)
" TODO: same as NERDTree
nnoremap s<left> :leftabove vnew<CR>
nnoremap s<right> :rightbelow vnew<CR> 
nnoremap s<up> :leftabove new<CR>
nnoremap s<down> :rightbelow new<CR>
nnoremap sh :leftabove vnew<CR>
nnoremap sl :rightbelow vnew<CR> 
nnoremap sk :leftabove new<CR>
nnoremap sj :rightbelow new<CR>
inoremap <C-h> <C-o>:TmuxNavigateLeft<CR>
inoremap <C-j> <C-o>:TmuxNavigateDown<CR>
inoremap <C-k> <C-o>:TmuxNavigateUp<CR>
inoremap <C-l> <C-o>:TmuxNavigateRight<CR>


" Indent
nnoremap < <<
nnoremap > >>
vnoremap < <gv
vnoremap > >gv


" -------Leader-------------
" Edit vimrc
nmap <Leader>vimrc :e $MYVIMRC<CR>

" Select All
nnoremap <Leader>a ggVG


" Save file with <Leader>w
nnoremap <Leader>w :w<CR>

" quit file with <Leader>q
nnoremap <Leader>q :q<CR>

" search with magic(regex)
nnoremap / /\v

" ---------Plugins---------------
" vim-expand-region
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" EasyMotion
nmap <Leader><Leader> <Plug>(easymotion-s)
map \\ <Plug>(easymotion-prefix)

" NERDTree
nnoremap <Leader>b :NERDTreeToggle \| wincmd p<CR>

" NerdCommenter
let g:NERDSpaceDelims=1
nnoremap <silent> ; :call NERDComment( 'n' , "Toggle")<CR>
vnoremap <silent> ; :call NERDComment( 'v' , "Toggle")<CR>gv

" GitGutter
" Navigate to hunk
nmap ]h <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterPrevHunk
" Toggle highlight
nmap <Leader>hl :GitGutterLineHighlightsToggle<CR>

" Gundo
nnoremap <Leader>gu :GundoToggle<CR>

" FZF
nnoremap <C-p> :Files<CR>
nnoremap <C-f> :Ag<CR>
cnoremap : :Commands<CR>


" Search for selected text, forwards or backwards.
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
